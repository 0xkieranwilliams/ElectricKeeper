{"ast":null,"code":"var _jsxFileName = \"/home/johanna/Desktop/eth-electric/src/pages/Wrap.js\",\n    _s = $RefreshSig$();\n\nimport EthLogo from \"../assets/svg/eth_logo.svg\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { ABI } from \"../config\";\nimport ErrorModal from \"../components/ErrorModal\";\nimport { DataContext } from '../DataContext'; //TODO: add ErrorModal\n//MetaMask wallet shown/button if connect\n//Dropdown for network switch statements\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Wrap(_ref) {\n  _s();\n\n  let {\n    degree,\n    userLocation,\n    basic\n  } = _ref;\n  const [apiData, setApiData] = useState([]);\n  const [userWethInput, setUserWethInput] = useState(null);\n  const [userEthInput, setUserEthInput] = useState(null);\n  const [wethContract, setWethContract] = useState(null);\n  const [wethBalance, setAvailableWethBalance] = useState(null);\n  const [metamaskAddress, setMetamaskAddress] = useState(\"\");\n  const [showToast, setShowToast] = useState();\n  const [errorMsg, setErrorMsg] = useState();\n  const [chainId, setChainId] = useState(null);\n  const {\n    userAccountAddress,\n    setUserAccountAddress\n  } = React.useContext(DataContext);\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n      window.ethereum.on(\"accountsChanged\", () => {\n        window.location.reload();\n      });\n    }\n\n    const loadBlockchainData = async () => {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\"); //const network = await web3.eth.net.getNetworkType();\n      //await window.ethereum.enable();\n      //const addressFromMetamask = await web3.eth.getAccounts();\n\n      const chainId = await web3.eth.getChainId();\n      setMetamaskAddress(userAccountAddress[0]); //Load the smart contract\n\n      const wethContract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS);\n      setWethContract(wethContract);\n\n      if (metamaskAddress) {\n        let availableWeth = await wethContract.methods.balanceOf(metamaskAddress).call();\n        setAvailableWethBalance(availableWeth);\n        console.log(availableWeth, \"avail Weth:\");\n      }\n    };\n\n    loadBlockchainData();\n  }, [userAccountAddress[0]]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"col-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Wrap here \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Your total weth available: \", wethBalance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"col-6\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: EthLogo,\n          style: {\n            width: \"40%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"col\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), showToast ? /*#__PURE__*/_jsxDEV(ErrorModal, {\n      showToastFromProp: showToast,\n      onClose: () => setShowToast(false),\n      errorMsg: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Wrap, \"KqYHpZwhGYBp2Iztp2veRh+e0H8=\");\n\n_c = Wrap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wrap\");","map":{"version":3,"sources":["/home/johanna/Desktop/eth-electric/src/pages/Wrap.js"],"names":["React","Component","useEffect","useState","Web3","ABI","ErrorModal","DataContext","Wrap","degree","userLocation","basic","apiData","setApiData","userWethInput","setUserWethInput","userEthInput","setUserEthInput","wethContract","setWethContract","wethBalance","setAvailableWethBalance","metamaskAddress","setMetamaskAddress","showToast","setShowToast","errorMsg","setErrorMsg","chainId","setChainId","userAccountAddress","setUserAccountAddress","useContext","window","ethereum","on","location","reload","loadBlockchainData","web3","givenProvider","eth","getChainId","Contract","CONTRACT_ADDRESS","availableWeth","methods","balanceOf","call","console","log","EthLogo","width"],"mappings":"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","sourcesContent":["import EthLogo from \"../assets/svg/eth_logo.svg\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { ABI } from \"../config\";\nimport ErrorModal from \"../components/ErrorModal\";\n\nimport {DataContext} from '../DataContext';\n\n\n//TODO: add ErrorModal\n//MetaMask wallet shown/button if connect\n//Dropdown for network switch statements\n\nexport default function Wrap({ degree, userLocation, basic }) {\n  const [apiData, setApiData] = useState([]);\n  const [userWethInput, setUserWethInput] = useState(null);\n  const [userEthInput, setUserEthInput] = useState(null);\n  const [wethContract, setWethContract] = useState(null);\n  const [wethBalance, setAvailableWethBalance] = useState(null);\n  const [metamaskAddress, setMetamaskAddress] = useState(\"\");\n  const [showToast, setShowToast] = useState();\n  const [errorMsg, setErrorMsg] = useState();\n  const [chainId, setChainId] = useState(null);\n  const {userAccountAddress, setUserAccountAddress} = React.useContext(DataContext);\n\n\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n      window.ethereum.on(\"accountsChanged\", () => {\n        window.location.reload();\n      });\n    }\n    const loadBlockchainData = async () => {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n      //const network = await web3.eth.net.getNetworkType();\n      //await window.ethereum.enable();\n      //const addressFromMetamask = await web3.eth.getAccounts();\n      const chainId = await web3.eth.getChainId();\n\n      setMetamaskAddress(userAccountAddress[0]);\n    \n\n      //Load the smart contract\n      const wethContract = new web3.eth.Contract(\n        ABI,\n        CONTRACT_ADDRESS\n      );\n      setWethContract(wethContract);\n\n      if (metamaskAddress) {\n        let availableWeth = await wethContract.methods\n          .balanceOf(metamaskAddress)\n          .call();\n        setAvailableWethBalance(availableWeth);\n        console.log(availableWeth, \"avail Weth:\");\n      }\n    };\n    loadBlockchainData();\n  }, [userAccountAddress[0]]);\n\n  \n\n  return (\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-5\">\n          <h1>\n            <br></br>\n            <b>Wrap here </b>\n          </h1>\n          <div>Your total weth available: {wethBalance}</div>\n\n        </div>\n        <div class=\"col-6\">\n          <img src={EthLogo} style={{ width: \"40%\" }} />\n        </div>\n        <div class=\"col\"></div>\n      </div>\n      {showToast ? (\n        <ErrorModal\n          showToastFromProp={showToast}\n          onClose={() => setShowToast(false)}\n          errorMsg={errorMsg}\n        ></ErrorModal>\n      ) : null}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}