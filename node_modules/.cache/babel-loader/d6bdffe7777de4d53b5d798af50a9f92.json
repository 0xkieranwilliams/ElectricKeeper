{"ast":null,"code":"var _jsxFileName = \"/home/johanna/Desktop/ElectricalEthereum/frontend/src/pages/Buy.js\",\n    _s = $RefreshSig$();\n\nimport EthLogo from \"../assets/svg/eth_logo.svg\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { ABI, CONTRACT_ADDRESS, ELECTRICKEEPER_ABI, ELECTRICKEEPER_CONTRACT_ADDRESS } from \"../config\";\nimport ErrorModal from \"../components/ErrorModal\";\nimport { DataContext } from \"../DataContext\"; //TODO: add ErrorModal\n//MetaMask wallet shown/button if connect\n//Dropdown for network switch statements\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Buy(_ref) {\n  _s();\n\n  let {\n    degree,\n    userLocation,\n    basic\n  } = _ref;\n  const [maticPriceFeedContract, setMaticPriceFeedContract] = useState(null);\n  const [electricKeeperContract, setElectricKeeperContract] = useState(null);\n  const [wethBalance, setAvailableWethBalance] = useState(null);\n  const [metamaskAddress, setMetamaskAddress] = useState(\"\");\n  const [inputAmount, setInputAmount] = useState(\"\");\n  const [latestPriceOfMatic_1p, setLatestPriceOfMatic_1p] = useState(\"\");\n  const [showToast, setShowToast] = useState();\n  const [errorMsg, setErrorMsg] = useState();\n  const {\n    userAccountAddress,\n    setUserAccountAddress\n  } = React.useContext(DataContext);\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n      window.ethereum.on(\"accountsChanged\", () => {\n        window.location.reload();\n      });\n    }\n\n    const loadBlockchainData = async () => {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\"); //const network = await web3.eth.net.getNetworkType();\n      //await window.ethereum.enable();\n      //const addressFromMetamask = await web3.eth.getAccounts();\n\n      const chainId = await web3.eth.getChainId();\n      setMetamaskAddress(userAccountAddress[0]); //Load the smart contract\n\n      const maticPriceFeedContract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS);\n      const electricKeeperContract = new web3.eth.Contract(ELECTRICKEEPER_ABI, ELECTRICKEEPER_CONTRACT_ADDRESS);\n      setMaticPriceFeedContract(maticPriceFeedContract);\n      console.log(maticPriceFeedContract, 'This is the matic price feed contract');\n      console.log(electricKeeperContract, 'This is electric keeper contract');\n\n      if (maticPriceFeedContract !== null) {\n        maticPriceFeedContract.methods.getLatestPrice().call().then(data => {\n          setLatestPriceOfMatic_1p(web3.utils.fromWei(data));\n          console.log(data);\n          console.log(web3.utils.fromWei(data));\n        }).catch(err => {\n          console.log(err);\n        });\n      } //TODO: Old method from weth contract, refactor this to suit pricefeed contract\n\n      /*       if (metamaskAddress) {\n              let availableWeth = await maticPriceFeedContract.methods\n                .balanceOf(metamaskAddress)\n                .call();\n              setAvailableWethBalance(availableWeth);\n              console.log(availableWeth, \"avail Weth:\");\n            } */\n\n    };\n\n    loadBlockchainData();\n  }, [userAccountAddress[0]]);\n  useEffect(() => {\n    console.log(\"matic Price Feed contract: \", maticPriceFeedContract);\n  }, []);\n\n  const estimatedMatic = () => {\n    return latestPriceOfMatic_1p && inputAmount !== \"\" ? latestPriceOfMatic_1p * (100 * inputAmount) : 0;\n  };\n\n  const handleButtonClick = color => {\n    console.log('You chose the color:', color);\n  };\n\n  const renderInputBox = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: 150,\n          marginTop: 50,\n          display: \"flex\",\n          alignItems: \"center\",\n          flexDirection: \"column\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"50%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              alignSelf: \"start\",\n              color: \"#ffdd9a\",\n              marginRight: \"20px\"\n            },\n            htmlFor: \"usd\",\n            children: \"USD:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            class: \"input-matic\",\n            min: \"0\",\n            placeholder: \"enter USD amount\",\n            \"data-name\": \"usd\",\n            value: inputAmount,\n            onChange: e => setInputAmount(e.target.value),\n            style: {\n              width: \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"80%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn-hover color-blue\",\n            onClick: () => handleButtonClick('blue'),\n            children: \"Blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn-hover color-green\",\n            onClick: () => handleButtonClick('green'),\n            children: \"Green\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn-hover color-yellow\",\n            onClick: () => handleButtonClick('yellow'),\n            children: \"Yellow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn-hover color-red\",\n            onClick: () => handleButtonClick('red'),\n            children: \"Red\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Amount: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), \" \\xA0\\xA0\\xA0\\xA0 \\u2248 \\xA0 \", estimatedMatic().toFixed(3), \" matic\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), \"buy electricity\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"enter a USD amount, and buy electricity with our smart contract grid \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: renderInputBox()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), showToast ? /*#__PURE__*/_jsxDEV(ErrorModal, {\n      showToastFromProp: showToast,\n      onClose: () => setShowToast(false),\n      errorMsg: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Buy, \"byG+XpLjCDXfQSrNbGZ0t8a+B2U=\");\n\n_c = Buy;\n\nvar _c;\n\n$RefreshReg$(_c, \"Buy\");","map":{"version":3,"sources":["/home/johanna/Desktop/ElectricalEthereum/frontend/src/pages/Buy.js"],"names":["React","Component","useEffect","useState","Web3","ABI","CONTRACT_ADDRESS","ELECTRICKEEPER_ABI","ELECTRICKEEPER_CONTRACT_ADDRESS","ErrorModal","DataContext","Buy","degree","userLocation","basic","maticPriceFeedContract","setMaticPriceFeedContract","electricKeeperContract","setElectricKeeperContract","wethBalance","setAvailableWethBalance","metamaskAddress","setMetamaskAddress","inputAmount","setInputAmount","latestPriceOfMatic_1p","setLatestPriceOfMatic_1p","showToast","setShowToast","errorMsg","setErrorMsg","userAccountAddress","setUserAccountAddress","useContext","window","ethereum","on","location","reload","loadBlockchainData","web3","givenProvider","chainId","eth","getChainId","Contract","console","log","methods","getLatestPrice","call","then","data","utils","fromWei","catch","err","estimatedMatic","handleButtonClick","color","renderInputBox","marginBottom","marginTop","display","alignItems","flexDirection","width","alignSelf","marginRight","e","target","value","toFixed"],"mappings":";;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,GAAT,EAAcC,gBAAd,EAAgCC,kBAAhC,EAAoDC,+BAApD,QAA2F,WAA3F;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,SAASC,WAAT,QAA4B,gBAA5B,C,CAEA;AACA;AACA;;;;AAEA,eAAe,SAASC,GAAT,OAA8C;AAAA;;AAAA,MAAjC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA;AAAxB,GAAiC;AAC3D,QAAM,CAACC,sBAAD,EAAyBC,yBAAzB,IAAsDb,QAAQ,CAAC,IAAD,CAApE;AACA,QAAM,CAACc,sBAAD,EAAyBC,yBAAzB,IAAsDf,QAAQ,CAAC,IAAD,CAApE;AAEA,QAAM,CAACgB,WAAD,EAAcC,uBAAd,IAAyCjB,QAAQ,CAAC,IAAD,CAAvD;AACA,QAAM,CAACkB,eAAD,EAAkBC,kBAAlB,IAAwCnB,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACoB,WAAD,EAAcC,cAAd,IAAgCrB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACsB,qBAAD,EAAwBC,wBAAxB,IAAoDvB,QAAQ,CAAC,EAAD,CAAlE;AACA,QAAM,CAACwB,SAAD,EAAYC,YAAZ,IAA4BzB,QAAQ,EAA1C;AACA,QAAM,CAAC0B,QAAD,EAAWC,WAAX,IAA0B3B,QAAQ,EAAxC;AACA,QAAM;AAAE4B,IAAAA,kBAAF;AAAsBC,IAAAA;AAAtB,MACJhC,KAAK,CAACiC,UAAN,CAAiBvB,WAAjB,CADF;AAKAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgC,MAAM,CAACC,QAAX,EAAqB;AACnBD,MAAAA,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmB,cAAnB,EAAmC,MAAM;AACvCF,QAAAA,MAAM,CAACG,QAAP,CAAgBC,MAAhB;AACD,OAFD;AAGAJ,MAAAA,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmB,iBAAnB,EAAsC,MAAM;AAC1CF,QAAAA,MAAM,CAACG,QAAP,CAAgBC,MAAhB;AACD,OAFD;AAGD;;AACD,UAAMC,kBAAkB,GAAG,YAAY;AACrC,YAAMC,IAAI,GAAG,IAAIpC,IAAJ,CAASA,IAAI,CAACqC,aAAL,IAAsB,uBAA/B,CAAb,CADqC,CAErC;AACA;AACA;;AACA,YAAMC,OAAO,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASC,UAAT,EAAtB;AAEAtB,MAAAA,kBAAkB,CAACS,kBAAkB,CAAC,CAAD,CAAnB,CAAlB,CAPqC,CASrC;;AACA,YAAMhB,sBAAsB,GAAG,IAAIyB,IAAI,CAACG,GAAL,CAASE,QAAb,CAAsBxC,GAAtB,EAA2BC,gBAA3B,CAA/B;AACA,YAAMW,sBAAsB,GAAG,IAAIuB,IAAI,CAACG,GAAL,CAASE,QAAb,CAAsBtC,kBAAtB,EAA0CC,+BAA1C,CAA/B;AAEAQ,MAAAA,yBAAyB,CAACD,sBAAD,CAAzB;AACA+B,MAAAA,OAAO,CAACC,GAAR,CAAYhC,sBAAZ,EAAoC,uCAApC;AACA+B,MAAAA,OAAO,CAACC,GAAR,CAAY9B,sBAAZ,EAAoC,kCAApC;;AAEA,UAAIF,sBAAsB,KAAK,IAA/B,EAAqC;AACnCA,QAAAA,sBAAsB,CAACiC,OAAvB,CAA+BC,cAA/B,GAAgDC,IAAhD,GAAuDC,IAAvD,CAA6DC,IAAD,IAAU;AACpE1B,UAAAA,wBAAwB,CAACc,IAAI,CAACa,KAAL,CAAWC,OAAX,CAAmBF,IAAnB,CAAD,CAAxB;AACAN,UAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACAN,UAAAA,OAAO,CAACC,GAAR,CAAYP,IAAI,CAACa,KAAL,CAAWC,OAAX,CAAmBF,IAAnB,CAAZ;AACD,SAJD,EAIGG,KAJH,CAIUC,GAAD,IAAS;AAChBV,UAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACD,SAND;AAOD,OAzBoC,CA2BrC;;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AACK,KAnCD;;AAoCAjB,IAAAA,kBAAkB;AACnB,GA9CQ,EA8CN,CAACR,kBAAkB,CAAC,CAAD,CAAnB,CA9CM,CAAT;AAgDA7B,EAAAA,SAAS,CAAC,MAAM;AACd4C,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2ChC,sBAA3C;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAM0C,cAAc,GAAG,MAAM;AAC3B,WACEhC,qBAAqB,IAAIF,WAAW,KAAK,EAAzC,GAA8CE,qBAAqB,IAAI,MAAKF,WAAT,CAAnE,GAA2F,CAD7F;AAGD,GAJD;;AAMA,QAAMmC,iBAAiB,GAAIC,KAAD,IAAW;AACnCb,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCY,KAApC;AACD,GAFD;;AAIA,QAAMC,cAAc,GAAG,MAAM;AAC3B,wBACE;AAAA,6BACE;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,YAAY,EAAE,GADT;AAELC,UAAAA,SAAS,EAAE,EAFN;AAGLC,UAAAA,OAAO,EAAE,MAHJ;AAILC,UAAAA,UAAU,EAAE,QAJP;AAKLC,UAAAA,aAAa,EAAE;AALV,SADT;AAAA,gCASE;AAAK,UAAA,KAAK,EAAE;AAAEF,YAAAA,OAAO,EAAE,MAAX;AAAmBE,YAAAA,aAAa,EAAE,QAAlC;AAA4CC,YAAAA,KAAK,EAAE;AAAnD,WAAZ;AAAA,kCACA;AAAO,YAAA,KAAK,EAAE;AAACC,cAAAA,SAAS,EAAE,OAAZ;AAAqBR,cAAAA,KAAK,EAAE,SAA5B;AAAuCS,cAAAA,WAAW,EAAE;AAApD,aAAd;AAA2E,YAAA,OAAO,EAAC,KAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA;AACE,YAAA,IAAI,EAAC,QADP;AAEE,YAAA,KAAK,EAAC,aAFR;AAGE,YAAA,GAAG,EAAC,GAHN;AAIE,YAAA,WAAW,EAAC,kBAJd;AAKE,yBAAU,KALZ;AAME,YAAA,KAAK,EAAE7C,WANT;AAOE,YAAA,QAAQ,EAAG8C,CAAD,IAAO7C,cAAc,CAAC6C,CAAC,CAACC,MAAF,CAASC,KAAV,CAPjC;AAQE,YAAA,KAAK,EAAE;AAAEL,cAAAA,KAAK,EAAE;AAAT;AART;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF,eAsBE;AAAA;AAAA;AAAA;AAAA,gBAtBF,eAuBE;AAAK,UAAA,KAAK,EAAE;AAAEA,YAAAA,KAAK,EAAE;AAAT,WAAZ;AAAA,kCACE;AAAQ,YAAA,KAAK,EAAC,sBAAd;AAAqC,YAAA,OAAO,EAAE,MAAMR,iBAAiB,CAAC,MAAD,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAQ,YAAA,KAAK,EAAC,uBAAd;AAAsC,YAAA,OAAO,EAAE,MAAMA,iBAAiB,CAAC,OAAD,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAQ,YAAA,KAAK,EAAC,wBAAd;AAAuC,YAAA,OAAO,EAAE,MAAMA,iBAAiB,CAAC,QAAD,CAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAQ,YAAA,KAAK,EAAC,qBAAd;AAAoC,YAAA,OAAO,EAAE,MAAMA,iBAAiB,CAAC,KAAD,CAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvBF,eA6BE;AAAA;AAAA;AAAA;AAAA,gBA7BF,eA8BE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,oCACqDD,cAAc,GAAGe,OAAjB,CAAyB,CAAzB,CADrD;AAAA;AAAA;AAAA;AAAA;AAAA,gBA9BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AAsCD,GAvCD;;AAyCA,sBACE;AAAK,IAAA,KAAK,EAAC,WAAX;AAAA,4BACE;AAAK,MAAA,KAAK,EAAC,KAAX;AAAA,6BACE;AAAA,gCACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA,kBADF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,oBAAsBZ,cAAc;AAApC;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAWGjC,SAAS,gBACR,QAAC,UAAD;AACE,MAAA,iBAAiB,EAAEA,SADrB;AAEE,MAAA,OAAO,EAAE,MAAMC,YAAY,CAAC,KAAD,CAF7B;AAGE,MAAA,QAAQ,EAAEC;AAHZ;AAAA;AAAA;AAAA;AAAA,YADQ,GAMN,IAjBN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GA3IuBlB,G;;KAAAA,G","sourcesContent":["import EthLogo from \"../assets/svg/eth_logo.svg\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { ABI, CONTRACT_ADDRESS, ELECTRICKEEPER_ABI, ELECTRICKEEPER_CONTRACT_ADDRESS } from \"../config\";\nimport ErrorModal from \"../components/ErrorModal\";\n\nimport { DataContext } from \"../DataContext\";\n\n//TODO: add ErrorModal\n//MetaMask wallet shown/button if connect\n//Dropdown for network switch statements\n\nexport default function Buy({ degree, userLocation, basic }) {\n  const [maticPriceFeedContract, setMaticPriceFeedContract] = useState(null);\n  const [electricKeeperContract, setElectricKeeperContract] = useState(null);\n\n  const [wethBalance, setAvailableWethBalance] = useState(null);\n  const [metamaskAddress, setMetamaskAddress] = useState(\"\");\n  const [inputAmount, setInputAmount] = useState(\"\");\n  const [latestPriceOfMatic_1p, setLatestPriceOfMatic_1p] = useState(\"\");\n  const [showToast, setShowToast] = useState();\n  const [errorMsg, setErrorMsg] = useState();\n  const { userAccountAddress, setUserAccountAddress } =\n    React.useContext(DataContext);\n  \n\n\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n      window.ethereum.on(\"accountsChanged\", () => {\n        window.location.reload();\n      });\n    }\n    const loadBlockchainData = async () => {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n      //const network = await web3.eth.net.getNetworkType();\n      //await window.ethereum.enable();\n      //const addressFromMetamask = await web3.eth.getAccounts();\n      const chainId = await web3.eth.getChainId();\n\n      setMetamaskAddress(userAccountAddress[0]);\n\n      //Load the smart contract\n      const maticPriceFeedContract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS);\n      const electricKeeperContract = new web3.eth.Contract(ELECTRICKEEPER_ABI, ELECTRICKEEPER_CONTRACT_ADDRESS);\n\n      setMaticPriceFeedContract(maticPriceFeedContract);\n      console.log(maticPriceFeedContract, 'This is the matic price feed contract')\n      console.log(electricKeeperContract, 'This is electric keeper contract')\n\n      if (maticPriceFeedContract !== null) {\n        maticPriceFeedContract.methods.getLatestPrice().call().then((data) => {\n          setLatestPriceOfMatic_1p(web3.utils.fromWei(data));\n          console.log(data);\n          console.log(web3.utils.fromWei(data));\n        }).catch((err) => {\n          console.log(err);\n        }); \n      }\n\n      //TODO: Old method from weth contract, refactor this to suit pricefeed contract\n/*       if (metamaskAddress) {\n        let availableWeth = await maticPriceFeedContract.methods\n          .balanceOf(metamaskAddress)\n          .call();\n        setAvailableWethBalance(availableWeth);\n        console.log(availableWeth, \"avail Weth:\");\n      } */\n    };\n    loadBlockchainData();\n  }, [userAccountAddress[0]]);\n\n  useEffect(() => {\n    console.log(\"matic Price Feed contract: \", maticPriceFeedContract);\n  }, []); \n\n  const estimatedMatic = () => {\n    return (\n      latestPriceOfMatic_1p && inputAmount !== \"\" ? latestPriceOfMatic_1p * (100* inputAmount) : 0\n    );\n  }\n\n  const handleButtonClick = (color) => {\n    console.log('You chose the color:', color)\n  }\n\n  const renderInputBox = () => {\n    return (\n      <>\n        <div\n          style={{\n            marginBottom: 150,\n            marginTop: 50,\n            display: \"flex\",\n            alignItems: \"center\",\n            flexDirection: \"column\",\n          }}\n        >\n          <div style={{ display: \"flex\", flexDirection: \"column\", width: \"50%\"}}>\n          <label style={{alignSelf: \"start\", color: \"#ffdd9a\", marginRight: \"20px\"}} htmlFor=\"usd\">USD:</label>\n          <input\n            type=\"number\"\n            class=\"input-matic\"\n            min=\"0\"\n            placeholder=\"enter USD amount\"\n            data-name=\"usd\"\n            value={inputAmount}\n            onChange={(e) => setInputAmount(e.target.value)}\n            style={{ width: \"100%\" }}\n          ></input>\n          </div>\n          <br />\n          <div style={{ width: \"80%\" }}>\n            <button class=\"btn-hover color-blue\" onClick={() => handleButtonClick('blue')}>Blue</button>\n            <button class=\"btn-hover color-green\" onClick={() => handleButtonClick('green')}>Green</button>\n            <button class=\"btn-hover color-yellow\" onClick={() => handleButtonClick('yellow')}>Yellow</button>\n            <button class=\"btn-hover color-red\" onClick={() => handleButtonClick('red')}>Red</button>\n          </div>\n          <br />\n          <p>\n            <b>Amount: </b> &nbsp;&nbsp;&nbsp;&nbsp; ≈ &nbsp; {estimatedMatic().toFixed(3)} matic\n          </p>\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <div class=\"container\">\n      <div class=\"row\">\n        <div>\n          <h1>\n            <br></br>\n            buy electricity\n          </h1>\n          <p>enter a USD amount, and buy electricity with our smart contract grid </p>\n          <div className=\"row\">{renderInputBox()}</div>\n        </div>\n      </div>\n      {showToast ? (\n        <ErrorModal\n          showToastFromProp={showToast}\n          onClose={() => setShowToast(false)}\n          errorMsg={errorMsg}\n        ></ErrorModal>\n      ) : null}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}