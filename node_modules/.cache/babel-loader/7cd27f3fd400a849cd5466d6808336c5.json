{"ast":null,"code":"var _jsxFileName = \"/home/johanna/Desktop/eth-electric/src/pages/Wrap.js\",\n    _s = $RefreshSig$();\n\nimport EthLogo from \"../assets/svg/eth_logo.svg\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { ABI, CONTRACT_ADDRESS } from \"../config\";\nimport ErrorModal from \"../components/ErrorModal\";\nimport { DataContext } from '../DataContext'; //TODO: add ErrorModal\n//MetaMask wallet shown/button if connect\n//Dropdown for network switch statements\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Wrap(_ref) {\n  _s();\n\n  let {\n    degree,\n    userLocation,\n    basic\n  } = _ref;\n  const [apiData, setApiData] = useState([]);\n  const [userWethInput, setUserWethInput] = useState(null);\n  const [userEthInput, setUserEthInput] = useState(null);\n  const [wethContract, setWethContract] = useState(null);\n  const [wethBalance, setAvailableWethBalance] = useState(null);\n  const [metamaskAddress, setMetamaskAddress] = useState(\"\");\n  const [showToast, setShowToast] = useState();\n  const [errorMsg, setErrorMsg] = useState();\n  const [chainId, setChainId] = useState(null);\n  const {\n    userAccountAddress,\n    setUserAccountAddress\n  } = React.useContext(DataContext);\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n      window.ethereum.on(\"accountsChanged\", () => {\n        window.location.reload();\n      });\n    }\n\n    const loadBlockchainData = async () => {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\"); //const network = await web3.eth.net.getNetworkType();\n      //await window.ethereum.enable();\n      //const addressFromMetamask = await web3.eth.getAccounts();\n\n      const chainId = await web3.eth.getChainId();\n      setMetamaskAddress(userAccountAddress[0]);\n      setChainId(chainId);\n      console.log(\"Network: \", CHAIN_IDS_TO_NAMES[chainId]);\n      console.log(\"Chain ID: \", chainId);\n      console.log(\"Contract Address: \", CONTRACT_ADDRESS[chainId]); //Load the smart contract\n\n      const wethContract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS[chainId]);\n      setWethContract(wethContract);\n\n      if (metamaskAddress) {\n        let availableWeth = await wethContract.methods.balanceOf(metamaskAddress).call();\n        setAvailableWethBalance(availableWeth);\n        console.log(availableWeth, \"avail Weth:\");\n      }\n    };\n\n    loadBlockchainData();\n  }, [userAccountAddress[0]]);\n\n  const renderInputBox = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: 150,\n          marginTop: 50\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          class: \"form-control\",\n          min: \"0\",\n          placeholder: \"Enter ETH amount\",\n          \"data-name\": \"eth\",\n          value: userEthInput,\n          onChange: e => setUserEthInput(e.target.value),\n          style: {\n            width: \"50%\",\n            float: \"left\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onWrapClick(),\n          type: \"button\",\n          class: \"btn btn-light\",\n          style: {\n            float: \"left\"\n          },\n          children: \"Wrap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        class: \"form-control\",\n        min: \"0\",\n        placeholder: \"Enter WETH amount\",\n        value: userWethInput,\n        \"data-name\": \"weth\",\n        onChange: e => setUserWethInput(e.target.value),\n        style: {\n          width: \"50%\",\n          float: \"left\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        class: \"btn btn-light\",\n        onClick: () => onUnwrapClick(),\n        style: {\n          float: \"left\"\n        },\n        children: \"Unwrap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  const onWrapClick = () => {\n    console.log(\"wrapping...\", userEthInput, \"ETH\");\n    return onActivityClick(\"wrap\");\n  };\n\n  const onUnwrapClick = () => {\n    console.log(\"unwrapping...\", userWethInput, \"WETH\");\n    onActivityClick(\"unwrap\");\n  };\n\n  const onActivityClick = activity => {\n    try {\n      if (metamaskAddress) {\n        let web3js = new Web3(window.ethereum);\n        let input = activity == 'wrap' ? userEthInput : userWethInput;\n        let userInputInWei = web3js.utils.toWei(input, 'ether');\n        let params = setParams(activity, userInputInWei);\n\n        if (userInputInWei >= 1) {\n          web3js.eth.sendTransaction(params);\n        }\n      }\n    } catch (err) {\n      setShowToast(true);\n      setErrorMsg(\"Something went wrong, please try again or report this issue\");\n      console.log(err, \"2Generic Error TODO: Popup, \");\n    }\n  };\n\n  const setParams = (activity, userInputInWei) => {\n    let params = {\n      to: CONTRACT_ADDRESS[chainId],\n      from: metamaskAddress\n    };\n\n    switch (activity) {\n      case \"wrap\":\n        {\n          params[\"data\"] = wethContract.methods.deposit().encodeABI();\n          params[\"value\"] = userInputInWei;\n        }\n        break;\n\n      case \"unwrap\":\n        {\n          params[\"data\"] = wethContract.methods.withdraw(userInputInWei).encodeABI();\n        }\n        break;\n    }\n\n    console.log(params);\n    return params;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"col-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Wrap here \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Your total weth available: \", wethBalance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), renderInputBox()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"col-6\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: EthLogo,\n          style: {\n            width: \"40%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"col\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), showToast ? /*#__PURE__*/_jsxDEV(ErrorModal, {\n      showToastFromProp: showToast,\n      onClose: () => setShowToast(false),\n      errorMsg: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Wrap, \"KqYHpZwhGYBp2Iztp2veRh+e0H8=\");\n\n_c = Wrap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wrap\");","map":{"version":3,"sources":["/home/johanna/Desktop/eth-electric/src/pages/Wrap.js"],"names":["React","Component","useEffect","useState","Web3","ABI","CONTRACT_ADDRESS","ErrorModal","DataContext","Wrap","degree","userLocation","basic","apiData","setApiData","userWethInput","setUserWethInput","userEthInput","setUserEthInput","wethContract","setWethContract","wethBalance","setAvailableWethBalance","metamaskAddress","setMetamaskAddress","showToast","setShowToast","errorMsg","setErrorMsg","chainId","setChainId","userAccountAddress","setUserAccountAddress","useContext","window","ethereum","on","location","reload","loadBlockchainData","web3","givenProvider","eth","getChainId","console","log","CHAIN_IDS_TO_NAMES","Contract","availableWeth","methods","balanceOf","call","renderInputBox","marginBottom","marginTop","e","target","value","width","float","onWrapClick","onUnwrapClick","onActivityClick","activity","web3js","input","userInputInWei","utils","toWei","params","setParams","sendTransaction","err","to","from","deposit","encodeABI","withdraw","EthLogo"],"mappings":";;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,WAAtC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,SAAQC,WAAR,QAA0B,gBAA1B,C,CAGA;AACA;AACA;;;;AAEA,eAAe,SAASC,IAAT,OAA+C;AAAA;;AAAA,MAAjC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA;AAAxB,GAAiC;AAC5D,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACkB,WAAD,EAAcC,uBAAd,IAAyCnB,QAAQ,CAAC,IAAD,CAAvD;AACA,QAAM,CAACoB,eAAD,EAAkBC,kBAAlB,IAAwCrB,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACsB,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,EAA1C;AACA,QAAM,CAACwB,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,EAAxC;AACA,QAAM,CAAC0B,OAAD,EAAUC,UAAV,IAAwB3B,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAC4B,IAAAA,kBAAD;AAAqBC,IAAAA;AAArB,MAA8ChC,KAAK,CAACiC,UAAN,CAAiBzB,WAAjB,CAApD;AAGAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgC,MAAM,CAACC,QAAX,EAAqB;AACnBD,MAAAA,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmB,cAAnB,EAAmC,MAAM;AACvCF,QAAAA,MAAM,CAACG,QAAP,CAAgBC,MAAhB;AACD,OAFD;AAGAJ,MAAAA,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmB,iBAAnB,EAAsC,MAAM;AAC1CF,QAAAA,MAAM,CAACG,QAAP,CAAgBC,MAAhB;AACD,OAFD;AAGD;;AACD,UAAMC,kBAAkB,GAAG,YAAY;AACrC,YAAMC,IAAI,GAAG,IAAIpC,IAAJ,CAASA,IAAI,CAACqC,aAAL,IAAsB,uBAA/B,CAAb,CADqC,CAErC;AACA;AACA;;AACA,YAAMZ,OAAO,GAAG,MAAMW,IAAI,CAACE,GAAL,CAASC,UAAT,EAAtB;AAEAnB,MAAAA,kBAAkB,CAACO,kBAAkB,CAAC,CAAD,CAAnB,CAAlB;AACAD,MAAAA,UAAU,CAACD,OAAD,CAAV;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,kBAAkB,CAACjB,OAAD,CAA3C;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BhB,OAA1B;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCvC,gBAAgB,CAACuB,OAAD,CAAlD,EAXqC,CAarC;;AACA,YAAMV,YAAY,GAAG,IAAIqB,IAAI,CAACE,GAAL,CAASK,QAAb,CACnB1C,GADmB,EAEnBC,gBAAgB,CAACuB,OAAD,CAFG,CAArB;AAIAT,MAAAA,eAAe,CAACD,YAAD,CAAf;;AAEA,UAAII,eAAJ,EAAqB;AACnB,YAAIyB,aAAa,GAAG,MAAM7B,YAAY,CAAC8B,OAAb,CACvBC,SADuB,CACb3B,eADa,EAEvB4B,IAFuB,EAA1B;AAGA7B,QAAAA,uBAAuB,CAAC0B,aAAD,CAAvB;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,aAAZ,EAA2B,aAA3B;AACD;AACF,KA3BD;;AA4BAT,IAAAA,kBAAkB;AACnB,GAtCQ,EAsCN,CAACR,kBAAkB,CAAC,CAAD,CAAnB,CAtCM,CAAT;;AAwCA,QAAMqB,cAAc,GAAG,MAAM;AAC3B,wBACE;AAAA,8BACE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,YAAY,EAAE,GAAhB;AAAqBC,UAAAA,SAAS,EAAE;AAAhC,SAAZ;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,KAAK,EAAC,cAFR;AAGE,UAAA,GAAG,EAAC,GAHN;AAIE,UAAA,WAAW,EAAC,kBAJd;AAKE,uBAAU,KALZ;AAME,UAAA,KAAK,EAAErC,YANT;AAOE,UAAA,QAAQ,EAAGsC,CAAD,IAAOrC,eAAe,CAACqC,CAAC,CAACC,MAAF,CAASC,KAAV,CAPlC;AAQE,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE,KAAT;AAAgBC,YAAAA,KAAK,EAAE;AAAvB;AART;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE;AACE,UAAA,OAAO,EAAE,MAAMC,WAAW,EAD5B;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,KAAK,EAAC,eAHR;AAIE,UAAA,KAAK,EAAE;AAAED,YAAAA,KAAK,EAAE;AAAT,WAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAqBE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,KAAK,EAAC,cAFR;AAGE,QAAA,GAAG,EAAC,GAHN;AAIE,QAAA,WAAW,EAAC,mBAJd;AAKE,QAAA,KAAK,EAAE5C,aALT;AAME,qBAAU,MANZ;AAOE,QAAA,QAAQ,EAAGwC,CAAD,IAAOvC,gBAAgB,CAACuC,CAAC,CAACC,MAAF,CAASC,KAAV,CAPnC;AAQE,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE,KAAT;AAAgBC,UAAAA,KAAK,EAAE;AAAvB;AART;AAAA;AAAA;AAAA;AAAA,cArBF,eA+BE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,KAAK,EAAC,eAFR;AAGE,QAAA,OAAO,EAAE,MAAME,aAAa,EAH9B;AAIE,QAAA,KAAK,EAAE;AAAEF,UAAAA,KAAK,EAAE;AAAT,SAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BF;AAAA,oBADF;AA0CD,GA3CD;;AA6CA,QAAMC,WAAW,GAAG,MAAM;AACxBhB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B5B,YAA3B,EAAyC,KAAzC;AACA,WAAO6C,eAAe,CAAC,MAAD,CAAtB;AACD,GAHD;;AAKA,QAAMD,aAAa,GAAG,MAAM;AAC1BjB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B9B,aAA7B,EAA4C,MAA5C;AACA+C,IAAAA,eAAe,CAAC,QAAD,CAAf;AACD,GAHD;;AAKA,QAAMA,eAAe,GAAIC,QAAD,IAAc;AACpC,QAAI;AACF,UAAIxC,eAAJ,EAAqB;AACnB,YAAIyC,MAAM,GAAG,IAAI5D,IAAJ,CAAS8B,MAAM,CAACC,QAAhB,CAAb;AACA,YAAI8B,KAAK,GAAGF,QAAQ,IAAI,MAAZ,GAAqB9C,YAArB,GAAoCF,aAAhD;AACA,YAAImD,cAAc,GAAGF,MAAM,CAACG,KAAP,CAAaC,KAAb,CAAmBH,KAAnB,EAA0B,OAA1B,CAArB;AACA,YAAII,MAAM,GAAGC,SAAS,CAACP,QAAD,EAAWG,cAAX,CAAtB;;AACA,YAAIA,cAAc,IAAI,CAAtB,EAAyB;AACvBF,UAAAA,MAAM,CAACtB,GAAP,CAAW6B,eAAX,CAA2BF,MAA3B;AACD;AACF;AACF,KAVD,CAUE,OAAOG,GAAP,EAAY;AACZ9C,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,MAAAA,WAAW,CACT,6DADS,CAAX;AAGAgB,MAAAA,OAAO,CAACC,GAAR,CAAY2B,GAAZ,EAAiB,8BAAjB;AACD;AACF,GAlBD;;AAoBA,QAAMF,SAAS,GAAG,CAACP,QAAD,EAAWG,cAAX,KAA8B;AAC9C,QAAIG,MAAM,GAAG;AACXI,MAAAA,EAAE,EAAEnE,gBAAgB,CAACuB,OAAD,CADT;AAEX6C,MAAAA,IAAI,EAAEnD;AAFK,KAAb;;AAIA,YAAQwC,QAAR;AACE,WAAK,MAAL;AACE;AACEM,UAAAA,MAAM,CAAC,MAAD,CAAN,GAAiBlD,YAAY,CAAC8B,OAAb,CAAqB0B,OAArB,GAA+BC,SAA/B,EAAjB;AACAP,UAAAA,MAAM,CAAC,OAAD,CAAN,GAAkBH,cAAlB;AACD;AACD;;AACF,WAAK,QAAL;AACE;AACEG,UAAAA,MAAM,CAAC,MAAD,CAAN,GAAiBlD,YAAY,CAAC8B,OAAb,CACd4B,QADc,CACLX,cADK,EAEdU,SAFc,EAAjB;AAGD;AACD;AAbJ;;AAeAhC,IAAAA,OAAO,CAACC,GAAR,CAAYwB,MAAZ;AACA,WAAOA,MAAP;AACD,GAtBD;;AAwBA,sBACE;AAAK,IAAA,KAAK,EAAC,WAAX;AAAA,4BACE;AAAK,MAAA,KAAK,EAAC,KAAX;AAAA,8BACE;AAAK,QAAA,KAAK,EAAC,OAAX;AAAA,gCACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE;AAAA,oDAAiChD,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,EAOG+B,cAAc,EAPjB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAUE;AAAK,QAAA,KAAK,EAAC,OAAX;AAAA,+BACE;AAAK,UAAA,GAAG,EAAE0B,OAAV;AAAmB,UAAA,KAAK,EAAE;AAAEpB,YAAAA,KAAK,EAAE;AAAT;AAA1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAVF,eAaE;AAAK,QAAA,KAAK,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAgBGjC,SAAS,gBACR,QAAC,UAAD;AACE,MAAA,iBAAiB,EAAEA,SADrB;AAEE,MAAA,OAAO,EAAE,MAAMC,YAAY,CAAC,KAAD,CAF7B;AAGE,MAAA,QAAQ,EAAEC;AAHZ;AAAA;AAAA;AAAA;AAAA,YADQ,GAMN,IAtBN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GAlLuBlB,I;;KAAAA,I","sourcesContent":["import EthLogo from \"../assets/svg/eth_logo.svg\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { ABI, CONTRACT_ADDRESS } from \"../config\";\nimport ErrorModal from \"../components/ErrorModal\";\n\nimport {DataContext} from '../DataContext';\n\n\n//TODO: add ErrorModal\n//MetaMask wallet shown/button if connect\n//Dropdown for network switch statements\n\nexport default function Wrap({ degree, userLocation, basic }) {\n  const [apiData, setApiData] = useState([]);\n  const [userWethInput, setUserWethInput] = useState(null);\n  const [userEthInput, setUserEthInput] = useState(null);\n  const [wethContract, setWethContract] = useState(null);\n  const [wethBalance, setAvailableWethBalance] = useState(null);\n  const [metamaskAddress, setMetamaskAddress] = useState(\"\");\n  const [showToast, setShowToast] = useState();\n  const [errorMsg, setErrorMsg] = useState();\n  const [chainId, setChainId] = useState(null);\n  const {userAccountAddress, setUserAccountAddress} = React.useContext(DataContext);\n\n\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n      window.ethereum.on(\"accountsChanged\", () => {\n        window.location.reload();\n      });\n    }\n    const loadBlockchainData = async () => {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n      //const network = await web3.eth.net.getNetworkType();\n      //await window.ethereum.enable();\n      //const addressFromMetamask = await web3.eth.getAccounts();\n      const chainId = await web3.eth.getChainId();\n\n      setMetamaskAddress(userAccountAddress[0]);\n      setChainId(chainId);\n      console.log(\"Network: \", CHAIN_IDS_TO_NAMES[chainId]);\n      console.log(\"Chain ID: \", chainId);\n      console.log(\"Contract Address: \", CONTRACT_ADDRESS[chainId]); \n\n      //Load the smart contract\n      const wethContract = new web3.eth.Contract(\n        ABI,\n        CONTRACT_ADDRESS[chainId]\n      );\n      setWethContract(wethContract);\n\n      if (metamaskAddress) {\n        let availableWeth = await wethContract.methods\n          .balanceOf(metamaskAddress)\n          .call();\n        setAvailableWethBalance(availableWeth);\n        console.log(availableWeth, \"avail Weth:\");\n      }\n    };\n    loadBlockchainData();\n  }, [userAccountAddress[0]]);\n\n  const renderInputBox = () => {\n    return (\n      <>\n        <div style={{ marginBottom: 150, marginTop: 50 }}>\n          <input\n            type=\"number\"\n            class=\"form-control\"\n            min=\"0\"\n            placeholder=\"Enter ETH amount\"\n            data-name=\"eth\"\n            value={userEthInput}\n            onChange={(e) => setUserEthInput(e.target.value)}\n            style={{ width: \"50%\", float: \"left\" }}\n          ></input>\n          <button\n            onClick={() => onWrapClick()}\n            type=\"button\"\n            class=\"btn btn-light\"\n            style={{ float: \"left\" }}\n          >\n            Wrap\n          </button>\n        </div>\n        <input\n          type=\"number\"\n          class=\"form-control\"\n          min=\"0\"\n          placeholder=\"Enter WETH amount\"\n          value={userWethInput}\n          data-name=\"weth\"\n          onChange={(e) => setUserWethInput(e.target.value)}\n          style={{ width: \"50%\", float: \"left\" }}\n        ></input>\n        <button\n          type=\"button\"\n          class=\"btn btn-light\"\n          onClick={() => onUnwrapClick()}\n          style={{ float: \"left\" }}\n        >\n          Unwrap\n        </button>\n      </>\n    );\n  };\n\n  const onWrapClick = () => {\n    console.log(\"wrapping...\", userEthInput, \"ETH\");\n    return onActivityClick(\"wrap\");\n  };\n\n  const onUnwrapClick = () => {\n    console.log(\"unwrapping...\", userWethInput, \"WETH\");\n    onActivityClick(\"unwrap\");\n  };\n\n  const onActivityClick = (activity) => {\n    try {\n      if (metamaskAddress) {\n        let web3js = new Web3(window.ethereum);\n        let input = activity == 'wrap' ? userEthInput : userWethInput\n        let userInputInWei = web3js.utils.toWei(input, 'ether');\n        let params = setParams(activity, userInputInWei);\n        if (userInputInWei >= 1) {\n          web3js.eth.sendTransaction(params);\n        }\n      }\n    } catch (err) {\n      setShowToast(true);\n      setErrorMsg(\n        \"Something went wrong, please try again or report this issue\"\n      );\n      console.log(err, \"2Generic Error TODO: Popup, \");\n    }\n  };\n\n  const setParams = (activity, userInputInWei) => {\n    let params = {\n      to: CONTRACT_ADDRESS[chainId],\n      from: metamaskAddress,\n    };\n    switch (activity) {\n      case \"wrap\":\n        {\n          params[\"data\"] = wethContract.methods.deposit().encodeABI();\n          params[\"value\"] = userInputInWei;\n        }\n        break;\n      case \"unwrap\":\n        {\n          params[\"data\"] = wethContract.methods\n            .withdraw(userInputInWei)\n            .encodeABI();\n        }\n        break;\n    }\n    console.log(params);\n    return params;\n  };\n\n  return (\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-5\">\n          <h1>\n            <br></br>\n            <b>Wrap here </b>\n          </h1>\n          <div>Your total weth available: {wethBalance}</div>\n\n          {renderInputBox()}\n        </div>\n        <div class=\"col-6\">\n          <img src={EthLogo} style={{ width: \"40%\" }} />\n        </div>\n        <div class=\"col\"></div>\n      </div>\n      {showToast ? (\n        <ErrorModal\n          showToastFromProp={showToast}\n          onClose={() => setShowToast(false)}\n          errorMsg={errorMsg}\n        ></ErrorModal>\n      ) : null}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}