{"ast":null,"code":"var _jsxFileName = \"/Users/kieranwilliams/Programming/hackathon/ElectricalEthereum/frontend/src/pages/Buy.js\",\n    _s = $RefreshSig$();\n\nimport EthLogo from \"../assets/svg/eth_logo.svg\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { ABI, CONTRACT_ADDRESS } from \"../config\";\nimport ErrorModal from \"../components/ErrorModal\";\nimport { DataContext } from \"../DataContext\"; //TODO: add ErrorModal\n//MetaMask wallet shown/button if connect\n//Dropdown for network switch statements\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Buy(_ref) {\n  _s();\n\n  let {\n    degree,\n    userLocation,\n    basic\n  } = _ref;\n  const [maticPriceFeedContract, setMaticPriceFeedContract] = useState(null);\n  const [wethBalance, setAvailableWethBalance] = useState(null);\n  const [metamaskAddress, setMetamaskAddress] = useState(\"\");\n  const [inputAmount, setInputAmount] = useState(\"\");\n  const [showToast, setShowToast] = useState();\n  const [errorMsg, setErrorMsg] = useState();\n  const {\n    userAccountAddress,\n    setUserAccountAddress\n  } = React.useContext(DataContext);\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n      window.ethereum.on(\"accountsChanged\", () => {\n        window.location.reload();\n      });\n    }\n\n    const loadBlockchainData = async () => {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\"); //const network = await web3.eth.net.getNetworkType();\n      //await window.ethereum.enable();\n      //const addressFromMetamask = await web3.eth.getAccounts();\n\n      const chainId = await web3.eth.getChainId();\n      setMetamaskAddress(userAccountAddress[0]); //Load the smart contract\n\n      const maticPriceFeedContract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS);\n      setMaticPriceFeedContract(maticPriceFeedContract);\n      console.log(maticPriceFeedContract, 'This is the matic price feed contract'); //TODO: Old method from weth contract, refactor this to suit pricefeed contract\n\n      /*       if (metamaskAddress) {\n              let availableWeth = await maticPriceFeedContract.methods\n                .balanceOf(metamaskAddress)\n                .call();\n              setAvailableWethBalance(availableWeth);\n              console.log(availableWeth, \"avail Weth:\");\n            } */\n    };\n\n    loadBlockchainData();\n  }, [userAccountAddress[0]]);\n\n  const renderInputBox = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: 150,\n          marginTop: 50,\n          display: \"flex\",\n          alignItems: \"center\",\n          flexDirection: \"column\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            alignSelf: \"start\"\n          },\n          htmlFor: \"usd\",\n          children: \"USD:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          class: \"input-matic\",\n          min: \"0\",\n          placeholder: \"enter USD amount\",\n          \"data-name\": \"usd\",\n          value: inputAmount,\n          onChange: e => setInputAmount(e.target.value),\n          style: {\n            width: \"50%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"80%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn-hover color-blue\",\n            children: \"Blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn-hover color-green\",\n            children: \"Green\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn-hover color-yellow\",\n            children: \"Yellow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn-hover color-red\",\n            children: \"Red\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Amount: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), \" \\xA0\\xA0\\xA0\\xA0 \\u2248 \\xA0 \", wethBalance, \" matic\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), \"buy electricity\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"enter a USD amount, and you will buy electricity with our smart contract grid \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: renderInputBox()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), showToast ? /*#__PURE__*/_jsxDEV(ErrorModal, {\n      showToastFromProp: showToast,\n      onClose: () => setShowToast(false),\n      errorMsg: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Buy, \"YGLQRr/iu8vfKDhUDz/Lht489nw=\");\n\n_c = Buy;\n\nvar _c;\n\n$RefreshReg$(_c, \"Buy\");","map":{"version":3,"sources":["/Users/kieranwilliams/Programming/hackathon/ElectricalEthereum/frontend/src/pages/Buy.js"],"names":["React","Component","useEffect","useState","Web3","ABI","CONTRACT_ADDRESS","ErrorModal","DataContext","Buy","degree","userLocation","basic","maticPriceFeedContract","setMaticPriceFeedContract","wethBalance","setAvailableWethBalance","metamaskAddress","setMetamaskAddress","inputAmount","setInputAmount","showToast","setShowToast","errorMsg","setErrorMsg","userAccountAddress","setUserAccountAddress","useContext","window","ethereum","on","location","reload","loadBlockchainData","web3","givenProvider","chainId","eth","getChainId","Contract","console","log","renderInputBox","marginBottom","marginTop","display","alignItems","flexDirection","alignSelf","e","target","value","width"],"mappings":"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","sourcesContent":["import EthLogo from \"../assets/svg/eth_logo.svg\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { ABI, CONTRACT_ADDRESS } from \"../config\";\nimport ErrorModal from \"../components/ErrorModal\";\n\nimport { DataContext } from \"../DataContext\";\n\n//TODO: add ErrorModal\n//MetaMask wallet shown/button if connect\n//Dropdown for network switch statements\n\nexport default function Buy({ degree, userLocation, basic }) {\n  const [maticPriceFeedContract, setMaticPriceFeedContract] = useState(null);\n  const [wethBalance, setAvailableWethBalance] = useState(null);\n  const [metamaskAddress, setMetamaskAddress] = useState(\"\");\n  const [inputAmount, setInputAmount] = useState(\"\");\n  const [showToast, setShowToast] = useState();\n  const [errorMsg, setErrorMsg] = useState();\n  const { userAccountAddress, setUserAccountAddress } =\n    React.useContext(DataContext);\n\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n      window.ethereum.on(\"accountsChanged\", () => {\n        window.location.reload();\n      });\n    }\n    const loadBlockchainData = async () => {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n      //const network = await web3.eth.net.getNetworkType();\n      //await window.ethereum.enable();\n      //const addressFromMetamask = await web3.eth.getAccounts();\n      const chainId = await web3.eth.getChainId();\n\n      setMetamaskAddress(userAccountAddress[0]);\n\n      //Load the smart contract\n      const maticPriceFeedContract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS);\n      setMaticPriceFeedContract(maticPriceFeedContract);\n      console.log(maticPriceFeedContract, 'This is the matic price feed contract')\n\n      //TODO: Old method from weth contract, refactor this to suit pricefeed contract\n/*       if (metamaskAddress) {\n        let availableWeth = await maticPriceFeedContract.methods\n          .balanceOf(metamaskAddress)\n          .call();\n        setAvailableWethBalance(availableWeth);\n        console.log(availableWeth, \"avail Weth:\");\n      } */\n    };\n    loadBlockchainData();\n  }, [userAccountAddress[0]]);\n\n  const renderInputBox = () => {\n    return (\n      <>\n        <div\n          style={{\n            marginBottom: 150,\n            marginTop: 50,\n            display: \"flex\",\n            alignItems: \"center\",\n            flexDirection: \"column\",\n          }}\n        >\n          <label style={{alignSelf: \"start\"}} htmlFor=\"usd\">USD:</label>\n          <input\n            type=\"number\"\n            class=\"input-matic\"\n            min=\"0\"\n            placeholder=\"enter USD amount\"\n            data-name=\"usd\"\n            value={inputAmount}\n            onChange={(e) => setInputAmount(e.target.value)}\n            style={{ width: \"50%\" }}\n          ></input>\n          <br />\n          <div style={{ width: \"80%\" }}>\n            <button class=\"btn-hover color-blue\">Blue</button>\n            <button class=\"btn-hover color-green\">Green</button>\n            <button class=\"btn-hover color-yellow\">Yellow</button>\n            <button class=\"btn-hover color-red\">Red</button>\n          </div>\n          <br />\n          <p>\n            <b>Amount: </b> &nbsp;&nbsp;&nbsp;&nbsp; ≈ &nbsp; {wethBalance} matic\n          </p>\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <div class=\"container\">\n      <div class=\"row\">\n        <div>\n          <h1>\n            <br></br>\n            buy electricity\n          </h1>\n          <p>enter a USD amount, and you will buy electricity with our smart contract grid </p>\n          <div className=\"row\">{renderInputBox()}</div>\n        </div>\n      </div>\n      {showToast ? (\n        <ErrorModal\n          showToastFromProp={showToast}\n          onClose={() => setShowToast(false)}\n          errorMsg={errorMsg}\n        ></ErrorModal>\n      ) : null}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}