{"ast":null,"code":"var _jsxFileName = \"/Users/kieranwilliams/Programming/hackathon/ElectricalEthereum/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Route, Routes } from \"react-router-dom\";\nimport { DataContext } from \"./DataContext\";\nimport { Web3ReactProvider, useWeb3React } from \"@web3-react/core\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { isMobile } from \"react-device-detect\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport Home from \"./pages/Home\";\nimport Buy from \"./pages/Buy\";\nimport About from \"./pages/About\";\nimport MobileDetected from \"./pages/MobileDetected\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport ErrorModal from \"./components/ErrorModal\";\nimport { injected, walletconnect, resetWalletConnector, walletlink } from \"./components/connectors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyContext = /*#__PURE__*/React.createContext();\n\nfunction App() {\n  _s();\n\n  const [userAccountAddress, setUserAccountAddress] = useState(\"\");\n  const [connectedAddrValue, setConnectedAddrValue] = useState(\"\");\n  const {\n    active,\n    account,\n    library,\n    connector,\n    activate,\n    deactivate\n  } = useWeb3React();\n  const web3 = useWeb3React();\n\n  const handleConnect = () => {\n    try {\n      web3.activate(injected, undefined, true);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectCoinbaseSimple = async () => {\n    try {\n      await web3.activate(walletlink);\n    } catch (ex) {\n      console.log(ex);\n    }\n  };\n\n  const handleConnectMetamask = async () => {\n    let that = this;\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const network = await web3.eth.net.getNetworkType();\n    await window.ethereum.enable(); //Fetch account data:\n\n    const accountFromMetaMask = await web3.eth.getAccounts();\n    console.log(accountFromMetaMask, \"account in app.js before set state\");\n    setUserAccountAddress(accountFromMetaMask);\n    setConnectedAddrValue(String(accountFromMetaMask).substr(0, 5) + \"...\" + String(accountFromMetaMask).substr(38, 4));\n    console.log(userAccountAddress, \"user metamask address after set state\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      userAccountAddress: userAccountAddress,\n      errorMsg: \"\"\n    },\n    children: [isMobile ? \"\" : /*#__PURE__*/_jsxDEV(Navbar, {\n      handleConnectMetamask: handleConnectMetamask,\n      connectedAddrValue: connectedAddrValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [isMobile ? /*#__PURE__*/_jsxDEV(MobileDetected, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 38\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/buy\",\n          element: /*#__PURE__*/_jsxDEV(Buy, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/about\",\n          element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/error\",\n          element: /*#__PURE__*/_jsxDEV(MobileDetected, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), DataContext.errorMsg !== \"\" ? /*#__PURE__*/_jsxDEV(ErrorModal, {\n        showToastFromProp: DataContext.errorMsg !== \"\",\n        onClose: () => DataContext.errorMsg = \"\",\n        errorMsg: DataContext.errorMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"eve0TidI56nhoDwbv9HtjT20c5s=\", false, function () {\n  return [useWeb3React, useWeb3React];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kieranwilliams/Programming/hackathon/ElectricalEthereum/frontend/src/App.js"],"names":["Route","Routes","DataContext","Web3ReactProvider","useWeb3React","InjectedConnector","Web3Provider","isMobile","React","Component","useEffect","useState","Web3","Home","Buy","About","MobileDetected","Navbar","Footer","ErrorModal","injected","walletconnect","resetWalletConnector","walletlink","MyContext","createContext","App","userAccountAddress","setUserAccountAddress","connectedAddrValue","setConnectedAddrValue","active","account","library","connector","activate","deactivate","web3","handleConnect","undefined","error","console","connectCoinbaseSimple","ex","log","handleConnectMetamask","that","givenProvider","network","eth","net","getNetworkType","window","ethereum","enable","accountFromMetaMask","getAccounts","String","substr","errorMsg"],"mappings":"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","sourcesContent":["import { Route, Routes } from \"react-router-dom\";\nimport { DataContext } from \"./DataContext\";\n\nimport { Web3ReactProvider, useWeb3React } from \"@web3-react/core\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { isMobile } from \"react-device-detect\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport Home from \"./pages/Home\";\nimport Buy from \"./pages/Buy\";\n\nimport About from \"./pages/About\";\nimport MobileDetected from \"./pages/MobileDetected\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport ErrorModal from \"./components/ErrorModal\";\n\nimport {\n  injected,\n  walletconnect,\n  resetWalletConnector,\n  walletlink,\n} from \"./components/connectors\";\n\nconst MyContext = React.createContext();\n\nfunction App() {\n  const [userAccountAddress, setUserAccountAddress] = useState(\"\");\n  const [connectedAddrValue, setConnectedAddrValue] = useState(\"\");\n\n  const { active, account, library, connector, activate, deactivate } =\n    useWeb3React();\n  const web3 = useWeb3React();\n\n  const handleConnect = () => {\n    try {\n      web3.activate(injected, undefined, true);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectCoinbaseSimple = async () => {\n    try {\n      await web3.activate(walletlink);\n    } catch (ex) {\n      console.log(ex);\n    }\n  };\n\n  const handleConnectMetamask = async () => {\n    let that = this;\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const network = await web3.eth.net.getNetworkType();\n    await window.ethereum.enable();\n    //Fetch account data:\n    const accountFromMetaMask = await web3.eth.getAccounts();\n    console.log(accountFromMetaMask, \"account in app.js before set state\");\n    setUserAccountAddress(accountFromMetaMask);\n    setConnectedAddrValue(\n      String(accountFromMetaMask).substr(0, 5) +\n        \"...\" +\n        String(accountFromMetaMask).substr(38, 4)\n    );\n\n    console.log(userAccountAddress, \"user metamask address after set state\");\n  };\n\n  return (\n    <DataContext.Provider value={{ userAccountAddress: userAccountAddress, errorMsg: \"\" }}>\n      {isMobile ? (\n        \"\"\n      ) : (\n        <Navbar\n          handleConnectMetamask={handleConnectMetamask}\n          connectedAddrValue={connectedAddrValue}\n        />\n      )}\n      <main>\n   \n\n        {isMobile ? (\n          <MobileDetected />\n        ) : (\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/buy\" element={<Buy />} />\n            <Route path=\"/about\" element={<About />} />\n            <Route path=\"/error\" element={<MobileDetected />} />\n          </Routes>\n        )}\n\n      {DataContext.errorMsg !== \"\" ? (\n        <ErrorModal\n          showToastFromProp={DataContext.errorMsg !== \"\"}\n          onClose={() => DataContext.errorMsg = \"\"}\n          errorMsg={DataContext.errorMsg}\n        ></ErrorModal>\n      ) : null}\n      </main>\n\n\n      <Footer />\n    </DataContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}